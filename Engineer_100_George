/**
George Chichirim
University of Oxford
**/
#include <bits/stdc++.h>
 
using namespace std;
 
struct node
{
    int st,dr,sum;
};
vector<node> arb;
vector<int> normal;
int v[1110][1110],rad[1110][1110],node1[1110],node2[1110];
 
int poz_normal(int x)
{
    return lower_bound(normal.begin(),normal.end(),x)-normal.begin()+1;
}
 
int new_node(int nod)
{
    arb.push_back(arb[nod]);
    return arb.size()-1;
}
 
int arbint_update(int nod,int st,int dr,int poz,int val)
{
    nod=new_node(nod);
    if(st==dr)
    {
        arb[nod].sum+=val;
        return nod;
    }
    int mid=(st+dr)/2,x=arb[nod].st,y=arb[nod].dr;
    if(poz<=mid) x=arbint_update(arb[nod].st,st,mid,poz,val);
    else y=arbint_update(arb[nod].dr,mid+1,dr,poz,val);
    arb[nod]={x,y};
    arb[nod].sum=arb[arb[nod].st].sum+arb[arb[nod].dr].sum;
    return nod;
}
 
int query(int x1,int y1,int x2,int y2,int k)
{
    for(int i=x1;i<=x2;i++)
    {
        node1[i]=rad[i][y1-1];
        node2[i]=rad[i][y2];
    }
    int st=1,dr=normal.size();
    while(st<dr)
    {
        int s=0,mid=(st+dr)/2;
        for(int i=x1;i<=x2;i++) s+=arb[arb[node2[i]].st].sum-arb[arb[node1[i]].st].sum;
        if(s<k)
        {
            k-=s;
            st=mid+1;
            for(int i=x1;i<=x2;i++)
            {
                node1[i]=arb[node1[i]].dr;
                node2[i]=arb[node2[i]].dr;
            }
        }
        else
        {
            dr=mid;
            for(int i=x1;i<=x2;i++)
            {
                node1[i]=arb[node1[i]].st;
                node2[i]=arb[node2[i]].st;
            }
        }
    }
    return st;
}
 
int main()
{
    freopen("engineer.in", "r", stdin);
    freopen("engineer.out", "w", stdout);
    int n,m,q;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
        {
            scanf("%d",&v[i][j]);
            normal.push_back(v[i][j]);
        }
    sort(normal.begin(),normal.end());
    normal.resize(unique(normal.begin(),normal.end())-normal.begin());
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++) v[i][j]=poz_normal(v[i][j]);
    arb.push_back({});
    for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++) rad[i][j]=arbint_update(rad[i][j-1],1,normal.size(),v[i][j],1);
    for(scanf("%d",&q);q;q--)
    {
        int x1,x2,y1,y2,k;
        scanf("%d%d%d%d%d",&x1,&y1,&x2,&y2,&k);
        printf("%d\n",normal[query(x1,y1,x2,y2,k)-1]);
    }
    return 0;
}
