#include <cstdio>
#include <vector>
#include <algorithm>
#include <cassert>
 
using namespace std;
 
struct punct
{
    int x,y,s;
    bool operator <(const punct &aux) const
    {
        if(x==aux.x) return y<aux.y;
        return x<aux.x;
    }
};
vector<punct> v;
 
class Arbint_Persistent
{
    public:
        Arbint_Persistent(vector<punct> v)
        {
            n=v.size();
            sort(v.begin(),v.end());
            for(int i=0;i<n;i++)
            {
                normx.push_back(v[i].x);
                normy.push_back(v[i].y);
            }
            sort(normy.begin(),normy.end());
            rad.push_back(arbint_init(1,n));
            for(int i=0;i<n;i++)
            {
                int poz=lower_bound(normy.begin(),normy.end(),v[i].y)-normy.begin()+1;
                rad.push_back(arbint_insert(rad[i],1,n,poz,v[i].s));
            }
        }
        int query(int x1,int x2,int y)
        {
            x1=lower_bound(normx.begin(),normx.end(),x1)-normx.begin();
            x2=upper_bound(normx.begin(),normx.end(),x2)-normx.begin();
            y=upper_bound(normy.begin(),normy.end(),y)-normy.begin();
            if(y==0) return 0;
            else return arbint_query(rad[x2],1,n,1,y)-arbint_query(rad[x1],1,n,1,y);
        }
    private:
        struct node
        {
            int st,dr,sum;
        };
        vector<node> arb;
        vector<int> rad,normx,normy;
        int n;
 
        int arbint_init(int st,int dr)
        {
            if(st==dr)
            {
                arb.push_back({0,0,0});
                return arb.size()-1;
            }
            int mid=(st+dr)/2;
            node aux={0,0,0};
            aux.st=arbint_init(st,mid);
            aux.dr=arbint_init(mid+1,dr);
            arb.push_back(aux);
            return arb.size()-1;
        }
        int arbint_insert(int nod,int st,int dr,int poz,int s)
        {
            if(st==dr)
            {
                arb.push_back(arb[nod]);
                arb.back().sum+=s;
                return arb.size()-1;
            }
            int mid=(st+dr)/2;
            node aux={arb[nod].st,arb[nod].dr,0};
            if(poz<=mid) aux.st=arbint_insert(arb[nod].st,st,mid,poz,s);
            else aux.dr=arbint_insert(arb[nod].dr,mid+1,dr,poz,s);
            aux.sum=arb[aux.st].sum+arb[aux.dr].sum;
            arb.push_back(aux);
            return arb.size()-1;
        }
        int arbint_query(int nod,int st,int dr,int left,int right)
        {
            if(left<=st && dr<=right) return arb[nod].sum;
            int mid=(st+dr)/2,s=0;
            if(left<=mid) s+=arbint_query(arb[nod].st,st,mid,left,right);
            if(mid<right) s+=arbint_query(arb[nod].dr,mid+1,dr,left,right);
            return s;
        }
};
 
int main()
{
    freopen("arcas.in", "r", stdin);
    freopen("arcas.out", "w", stdout);
    int n,m,x,y1,y2,y,r;
    scanf("%d%d",&n,&m);
    assert(1<=n && n<=100000);
    assert(1<=m && m<=100000);
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d%d",&x,&y1,&y2);
        assert(1<=x && x<=100000);
        assert(1<=y1 && y1<=100000);
        assert(1<=y2 && y2<=100000);
        y1-=x;y2-=x;
        v.push_back({x,y1,1});
        v.push_back({x,y2+1,-1});
    }
    Arbint_Persistent arb=Arbint_Persistent(v);
    for(int i=1;i<=m;i++)
    {
        scanf("%d%d%d",&x,&y,&r);
        assert(1<=x && x<=100000);
        assert(1<=y && y<=100000);
        assert(1<=r && r<=100000);
        y-=x;
        printf("%d\n",arb.query(x,x+r,y));
    }
    return 0;
}
