#include <bits/stdc++.h>
 
using namespace std;
 
char s[200200];
int pos[200200];
long long psum[200200];
 
long long get_index_sum(int a, int b) {
    return (long long) b * (b + 1) / 2 - (long long) a * (a - 1) / 2;
}
 
long long get_sum(int a, int b) {
    return psum[b] - psum[a - 1];
}
 
int main() {
    freopen("weeee.in", "r", stdin);
    freopen("weeee.out", "w", stdout);
 
    int n;
    scanf("%d\n", &n);
    gets(s + 1);
    for (int i = 1; i <= n; ++i)
        if (s[i] == 'E') {
            pos[++pos[0]] = i;
            psum[pos[0]] = psum[pos[0] - 1] + i;
        }
    if (pos[0] == 0 || pos[0] == n) {
        printf("-1");
        return 0;
    }
    long long best = 1LL << 60;
    for (int i = 2; i <= n; ++i) {
        long long cur = 0;
        if (pos[1] > i)
            cur = psum[pos[0]] - get_index_sum(i, i + pos[0] - 1);
        else if (pos[pos[0]] <= i + pos[0] - 1)
            cur = get_index_sum(i, i + pos[0] - 1) - psum[pos[0]];
        else {
            int st = 1, dr = pos[0], idx;
            while (st <= dr) {
                int med = (st + dr) / 2;
                if (pos[med] > i + med - 1) {
                    idx = med;
                    dr = med - 1;
                } else
                    st = med + 1;
            }
            cur = get_index_sum(i, i + idx - 2) - get_sum(1, idx - 1);
            cur += get_sum(idx, pos[0]) - get_index_sum(i + idx - 1, i + pos[0] - 1);
        }
        best = min(best, cur);
    }
    printf("%lld", best);
    return 0;
}
