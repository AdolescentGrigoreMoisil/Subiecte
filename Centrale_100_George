#include <cstdio>
#include <vector>
#include <set>
#include <algorithm>
#include <cassert>
 
using namespace std;
 
const int MaxN=7010,inf=2000000;
struct punct
{
    int x,y,poz;
    punct(int x1=0,int y1=0) {x=x1;y=y1;}
    bool operator <(const punct &aux) const
    {
        if(y==aux.y) return x<aux.x;
        return y<aux.y;
    }
    bool operator ==(const punct &aux) const
    {
        return x==aux.x && y==aux.y;
    }
}v[MaxN];
struct arbint
{
    set<punct> v;
}arb[4*MaxN],arb_copy[4*MaxN];
vector<punct> v1[MaxN];
vector<int> norm,edge[MaxN];
int q[2*MaxN],nr,n,dist,ok,auxdebuge;
char vaz[2*MaxN],sol[2*MaxN];
 
void arbint_first_init(int nod,int st,int dr)
{
    for(int i=st;i<=dr;i++)
        for(vector<punct>::iterator it=v1[i].begin();it!=v1[i].end();it++)
            arb_copy[nod].v.insert(*it);
    if(st==dr) return;
    int mid=(st+dr)/2;
    arbint_first_init(nod*2,st,mid);
    arbint_first_init(nod*2+1,mid+1,dr);
}
 
void arbint_init(int nod,int st,int dr)
{
    arb[nod].v=arb_copy[nod].v;
    if(st==dr) return;
    int mid=(st+dr)/2;
    arbint_init(nod*2,st,mid);
    arbint_init(nod*2+1,mid+1,dr);
}
 
void arbint_update(int nod,int st,int dr,int poz,punct a)
{
    arb[nod].v.erase(a);
    if(st==dr) return;
    int mid=(st+dr)/2;
    if(poz<=mid) arbint_update(nod*2,st,mid,poz,a);
    else arbint_update(nod*2+1,mid+1,dr,poz,a);
}
 
int arbint_query(int nod,int st,int dr,int left,int right,int y1,int y2,punct a)
{
    if(left<=st && dr<=right)
    {
        set<punct>::iterator it=arb[nod].v.lower_bound(punct(-inf,y1));
        if(it==arb[nod].v.end() || it->y>y2) return 0;
        else
        {
            if(*it==a)
            {
                ++it;
                if(it==arb[nod].v.end() || it->y>y2) return 0;
                else return it->poz;
            }
            else return it->poz;
        }
    }
    int mid=(st+dr)/2;
    if(left<=mid)
    {
        int s=arbint_query(nod*2,st,mid,left,right,y1,y2,a);
        if(s) return s;
    }
    if(mid<right)
    {
        int s=arbint_query(nod*2+1,mid+1,dr,left,right,y1,y2,a);
        if(s) return s;
    }
    return 0;
}
 
int query(punct a)
{
    int left=lower_bound(norm.begin(),norm.end(),a.x-dist)-norm.begin()+1,right=upper_bound(norm.begin(),norm.end(),a.x+dist)-norm.begin();
    return arbint_query(1,1,n,left,right,a.y-dist,a.y+dist,a);
}
 
void erase(punct a)
{
    int poz=lower_bound(norm.begin(),norm.end(),a.x)-norm.begin()+1;
    arbint_update(1,1,n,poz,a);
}
 
int non(int a)
{
    if(a<=n) return a+n;
    else return a-n;
}
 
void dfs1(int nod)
{
    vaz[nod]=1;
    if(nod>n)
    {
        for(vector<int>::iterator it=edge[nod-n].begin();it!=edge[nod-n].end();it++)
            if(!vaz[*it]) dfs1(*it);
    }
    else
    {
        while(1)
        {
            int vec=query(v[nod]);
            if(!vec) break;
            erase(v[vec]);
            if(vaz[vec+n]) continue;
            dfs1(vec+n);
        }
    }
    q[++nr]=nod;
}
 
void dfs2(int nod)
{
    if(sol[nod]) {ok=0;return;}
    vaz[nod]=sol[nod]=0;
    sol[non(nod)]=1;
    if(nod<=n)
    {
        for(vector<int>::iterator it=edge[nod].begin();it!=edge[nod].end();it++)
            if(vaz[*it+n]) dfs2(*it+n);
    }
    else
    {
        while(1)
        {
            int vec=query(v[nod-n]);
            if(!vec) break;
            erase(v[vec]);
            if(!vaz[vec]) continue;
            dfs2(vec);
        }
    }
}
 
int solve()
{
    for(int i=1;i<=2*n;i++) vaz[i]=sol[i]=0;
    nr=0;ok=1;
    arbint_init(1,1,n);
    for(int i=1;i<=2*n;i++)
        if(!vaz[i]) dfs1(i);
    arbint_init(1,1,n);
    for(int i=nr;i && ok;i--)
        if(vaz[q[i]] && vaz[non(q[i])]) dfs2(q[i]);
    return ok;
}
 
int main()
{
    freopen("centrale.in", "r", stdin);
    freopen("centrale.out", "w", stdout);
    int m,x,y;
    scanf("%d%d",&n,&m);
    assert(1<=n && n<=7000);
    assert(1<=m && m<=30000);
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d",&v[i].x,&v[i].y);
        assert(1<=v[i].x && v[i].x<=1000000);
        assert(1<=v[i].y && v[i].y<=1000000);
        int a=v[i].x-v[i].y,b=v[i].x+v[i].y;
        v[i].x=a;v[i].y=b;
        v[i].poz=i;
        norm.push_back(v[i].x);
    }
    for(int i=1;i<=m;i++)
    {
        scanf("%d%d",&x,&y);
        assert(1<=x && x<=n);
        assert(1<=y && y<=n);
        edge[x].push_back(y);
        edge[y].push_back(x);
    }
    sort(norm.begin(),norm.end());
    for(int i=1;i<=n;i++)
        v1[lower_bound(norm.begin(),norm.end(),v[i].x)-norm.begin()+1].push_back(v[i]);
    arbint_first_init(1,1,n);
    int st=0,dr=inf;
    while(st<=dr)
    {
        int mid=(st+dr)/2;
        dist=mid;
        if(solve()) st=mid+1;
        else dr=mid-1;
    }
    printf("%d\n",dr+1);
    return 0;
}
