/**
 * Code by Patrick Sava
 * "Spiru Haret" National College of Bucharest
 *
 *  Expected score : 100 ( Accepted )
 * O ( N ^ 2 )
 **/
 
#include <bits/stdc++.h>
 
using namespace std;
 
const char INput [ ] =  "plantatii.in" ;
const char OUTput [ ] = "plantatii.out" ;
const int MAX = 5000 ;
 
ifstream fin ( INput ) ;
ofstream fout ( OUTput ) ;
 
int mat [ MAX ] [ MAX ] ;
int secundar [ MAX ] [ MAX ] ;
int principal [ MAX ] [ MAX ] ;
 
# define FORN( a , b , c ) for ( int a = b ; a <= c ; ++ a )
# define FORNBACK( a , b , c ) for ( int a = b ; a >= c ; -- a )
 
inline bool inside ( int i , int j , int n )
{
    return i >= 1 and j >= 1 and i <= n and j <= n ;
}
 
 
int main ( void )
{
    int t ;
    fin >> t ;
    FORN ( tests , 1 , t )
    {
        int n , S ;
        fin >> n >> S ;
        FORN ( i , 1 , n )
            FORN ( j , 1 , n )
            {
                mat [ i ] [ j ] = 0 ;
                secundar [ i ] [ j ] = 0 ;
                principal [ i ] [ j ] = 0 ;
            }
        bool ok = false ;
        FORN ( i , 1 , n )
            FORN ( j , 1 , n ) {
                fin >> mat [ i ] [ j ] ;
                if ( mat [ i ] [ j ] <= S ) {
                    ok = true ;
                }
            }
        FORN ( i , 1 , n )
            FORN ( j , 1 , n )
            {
                principal [ i ] [ j ] = principal [ i - 1 ] [ j - 1 ] + mat [ i ] [ j ] ;
            }
        FORNBACK ( i , n , 1 )
            FORNBACK ( j , n , 1 )
            {
                secundar [ i ] [ j ] = secundar [ i + 1 ] [ j - 1 ] + mat [ i ] [ j ] ;
            }
        //if ( tests != 6 ) continue ;
        int CET = 0 ;
        FORN ( i , 1 , n )
        {
            FORN ( j , 1 , n )
            {
                /// coltul stanga jos in ( i , j )
                int local_sum = 0 ;
                int scadx = 0 ;
                int scady = 0 ;
                while ( local_sum <= S ){
                    CET += 2 ;
                    local_sum = 0 ;
                    if ( CET & 1 )
                    {
                        scadx = i - CET / 2 ;
                        scady = j + CET / 2 ;
                    }
                    int secundar_upper_i = i - CET + 1 ;
                    int secundar_upper_j = j + CET - 1 ;
                    int secundar_lower_i = i + 1 ;
                    int secundar_lower_j = j - 1 ;
                    if ( inside ( secundar_upper_i , secundar_upper_j , n ) == 0 ) break ;
                    if ( inside ( secundar_lower_i - 1 , secundar_lower_j + 1 , n ) == 0 ) break ;
                    int principal_lower_i = i ;
                    int principal_lower_j = j + CET - 1 ;
                    int principal_upper_i = i - CET ;
                    int principal_upper_j = j - 1 ;
                    if ( inside ( principal_lower_i , principal_lower_j , n ) == 0 ) break ;
                    if ( inside ( principal_upper_i + 1 , principal_upper_j + 1 , n ) == 0 ) break ;
                    local_sum += secundar [ secundar_upper_i ] [ secundar_upper_j ] - secundar [ secundar_lower_i ] [ secundar_lower_j ] ;
                    local_sum += principal [ principal_lower_i ] [ principal_lower_j ] - principal [ principal_upper_i ] [ principal_upper_j ] ;
                    if ( CET & 1 )
                    local_sum -= mat [ scadx ] [ scady ] ;
                }
                CET -= 2 ;
            }
        }
 
        int CET2 = CET ;
        if ( ok == false ) {
            cout << CET << '\n' ;
            continue ;
        }
        CET = 1 ;
        FORN ( i , 1 , n )
        {
            FORN ( j , 1 , n )
            {
                /// coltul stanga jos in ( i , j )
                int local_sum = 0 ;
                int scadx = 0 ;
                int scady = 0 ;
                while ( local_sum <= S ){
                    CET += 2 ;
                    local_sum = 0 ;
                    if ( CET & 1 )
                    {
                        scadx = i - CET / 2 ;
                        scady = j + CET / 2 ;
                    }
                    int secundar_upper_i = i - CET + 1 ;
                    int secundar_upper_j = j + CET - 1 ;
                    int secundar_lower_i = i + 1 ;
                    int secundar_lower_j = j - 1 ;
                    if ( inside ( secundar_upper_i , secundar_upper_j , n ) == 0 ) break ;
                    if ( inside ( secundar_lower_i - 1 , secundar_lower_j + 1 , n ) == 0 ) break ;
                    int principal_lower_i = i ;
                    int principal_lower_j = j + CET - 1 ;
                    int principal_upper_i = i - CET ;
                    int principal_upper_j = j - 1 ;
                    if ( inside ( principal_lower_i , principal_lower_j , n ) == 0 ) break ;
                    if ( inside ( principal_upper_i + 1 , principal_upper_j + 1 , n ) == 0 ) break ;
                    local_sum += secundar [ secundar_upper_i ] [ secundar_upper_j ] - secundar [ secundar_lower_i ] [ secundar_lower_j ] ;
                    local_sum += principal [ principal_lower_i ] [ principal_lower_j ] - principal [ principal_upper_i ] [ principal_upper_j ] ;
                    if ( CET & 1 )
                    local_sum -= mat [ scadx ] [ scady ] ;
                }
                CET -= 2 ;
            }
        }
 
        /*if ( tests == 6 ){
            fout << n << ' ' << S << '\n' ;
            FORN ( i , 1 , n )
            {
                FORN ( j , 1 , n )
                    fout << mat [ i ] [ j ] << ' ' ;
                fout << '\n' ;
            }
        }
        if ( tests == 6 )*/
        fout << max ( CET , CET2 ) << '\n' ;
    }
    return 0;
}
