/**
  * George Chichirim
  * University of Oxford
  * Correct solution: O(N * logValMax)
  * Expected: Accepted
*/
#include <bits/stdc++.h>
 
using namespace std;
 
const int MaxN=100010,MaxVal=100010;
struct edge
{
    int nod,c;
};
vector<edge> g[MaxN];
struct even
{
    int c,poz,p;
};
vector<even> v[MaxN];
int rmq[20][2*MaxN],logg[2*MaxN],first[MaxN],niv[MaxN],nr,maxv;
long long aib1[MaxVal],aib2[MaxVal],aib3[MaxVal],sol[MaxN],sum1,sum2,sum3;
 
void dfs1(int nod,int lev)
{
    rmq[0][++nr]=nod;
    first[nod]=nr;
    niv[nod]=lev;
    for(auto fiu : g[nod])
    {
        dfs1(fiu.nod,lev+1);
        rmq[0][++nr]=nod;
    }
}
 
int lca(int x,int y)
{
    x=first[x];y=first[y];
    if(x>y) swap(x,y);
    int l=logg[y-x+1];
    if(niv[rmq[l][x]]<niv[rmq[l][y-(1<<l)+1]]) return rmq[l][x];
    else return rmq[l][y-(1<<l)+1];
}
 
void aib_update(int i,long long s,long long aib[])
{
    for(;i<=maxv;i+=i&(-i)) aib[i]+=s;
}
 
long long aib_query(int i,long long aib[])
{
    long long s=0;
    for(;i>=1;i-=i&(-i)) s+=aib[i];
    return s;
}
 
void dfs2(int nod)
{
    for(auto a : v[nod])
    {
        long long s1=sum1-aib_query(a.c,aib1);
        long long s2=sum2-aib_query(a.c,aib2);
        long long s3=sum3-aib_query(a.c,aib3);
        sol[a.poz]+=1LL*a.p*(s1-2LL*s2*a.c+s3*a.c*a.c);
    }
    for(auto fiu : g[nod])
    {
        sum1+=1LL*fiu.c*fiu.c;
        aib_update(fiu.c,1LL*fiu.c*fiu.c,aib1);
        sum2+=fiu.c;
        aib_update(fiu.c,fiu.c,aib2);
        sum3++;
        aib_update(fiu.c,1,aib3);
        dfs2(fiu.nod);
        sum1-=1LL*fiu.c*fiu.c;
        aib_update(fiu.c,-1LL*fiu.c*fiu.c,aib1);
        sum2-=fiu.c;
        aib_update(fiu.c,-fiu.c,aib2);
        sum3--;
        aib_update(fiu.c,-1,aib3);
    }
}
 
int main()
{
    freopen("cuba.in", "r", stdin);
    freopen("cuba.out", "w", stdout);
    int n,q;
    scanf("%d%d",&n,&q);
    assert(1<=n && n<=100000);
    assert(1<=q && q<=100000);
    for(int i=2;i<=n;i++)
    {
        int x,c;
        scanf("%d%d",&x,&c);
        assert(1<=x && x<=n);
        assert(1<=c && c<=100000);
        g[x].push_back({i,c});
        maxv=max(maxv,c);
    }
    dfs1(1,0);
    for(int i=2;i<=nr;i++) logg[i]=logg[i/2]+1;
    for(int i=1;i<=logg[nr];i++)
    {
        int lim=nr-(1<<i)+1;
        for(int j=1;j<=lim;j++)
            if(niv[rmq[i-1][j]]<niv[rmq[i-1][j+(1<<(i-1))]]) rmq[i][j]=rmq[i-1][j];
            else rmq[i][j]=rmq[i-1][j+(1<<(i-1))];
    }
    for(int i=1;i<=q;i++)
    {
        int x,y,c;
        scanf("%d%d%d",&x,&y,&c);
        assert(1<=x && x<=100000);
        assert(1<=y && y<=100000);
        assert(1<=c && c<=100000);
        maxv=max(maxv,c);
        v[x].push_back({c,i,1});
        v[y].push_back({c,i,1});
        v[lca(x,y)].push_back({c,i,-2});
    }
    dfs2(1);
    for(int i=1;i<=q;i++) printf("%lld\n",sol[i]);
    return 0;
}
