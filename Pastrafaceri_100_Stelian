/* Stelian Chichirim
 * Complexitate: O(N + M)
 * Expected: AC
 */
 
#include <cstdio>
#include <vector>
#include <cstring>
#include <algorithm>
#include <deque>
 
using namespace std;
 
vector<int> cycle[300010],v[300010];
int ciclu[300010],nr,niv[300010],tata[300010];
char vaz[300010];
long long sol,val[300010],dp[300010],sum[600010];
 
void dfs(int nod,int tat,int nivel)
{
    niv[nod]=nivel;
    tata[nod]=tat;
    vaz[nod]=1;
    for(int i=0;i<v[nod].size();i++)
    {
        int vec=v[nod][i];
        if(vaz[vec]==0) dfs(vec,nod,nivel+1);
        else if(niv[vec]<niv[nod]-1)
        {
            nr++;
            for(int a=nod;a!=vec;a=tata[a])
            {
                cycle[nr].push_back(a);
                ciclu[a]=nr;
            }
            cycle[nr].push_back(vec);
            ciclu[vec]=nr;
        }
    }
}
 
void dfs1(int nod)
{
    int tip=ciclu[nod],poz;
    vaz[tip]=1;
    for(int i=0;i<cycle[tip].size();i++)
        if(cycle[tip][i]==nod) {poz=i;break;}
    for(int i=0;i<cycle[tip].size();i++)
    {
        int nod1=cycle[tip][i];
        for(int j=0;j<v[nod1].size();j++)
        {
            int vec=v[nod1][j];
            if(vaz[ciclu[vec]]==1) continue;
            dfs1(vec);
            val[nod1]+=dp[ciclu[vec]];
        }
    }
    int l=cycle[tip].size(),first;
    for(int i=0;i<l;i++) cycle[tip].push_back(cycle[tip][i]);
    sum[0]=val[cycle[tip][0]];
    for(int i=1;i<cycle[tip].size();i++) sum[i]=sum[i-1]+val[cycle[tip][i]];
    deque<pair<long long,int> > q;
    long long maxx=0;
    q.push_back({0,-1});
    for(int i=0;i<cycle[tip].size();i++)
    {
        while(!q.empty() && q.back().first>=sum[i]) q.pop_back();
        q.push_back({sum[i],i});
        while(q.front().second<i-l) q.pop_front();
        maxx=max(maxx,sum[i]-q.front().first);
    }
    sol=max(sol,maxx);;
    int first1=poz+l;
    sum[poz+l]=0;
    long long s2=0,s1=0;
    for(int i=poz+l-1;i>poz;i--)
    {
        s2+=val[cycle[tip][i]];
        if(s2>s1) {s1=s2;first1=i;}
        sum[i]=max(s2,sum[i+1]);
    }
    s1+=val[cycle[tip][poz]];
    maxx=max(s1,0LL);
    for(int i=poz+1;i<poz+l;i++)
    {
        int nod1=cycle[tip][i];
        if(i==first1)
        {
            s1-=val[nod1];
            first1++;
            long long val1=sum[first1];
            first1++;
            while(first1<=poz+l && val1==sum[first1])
            {
                s1-=val[cycle[tip][first1-1]];
                first1++;
            }
            first1--;
        }
        s1+=val[nod1];
        maxx=max(maxx,s1);
    }
    dp[tip]=maxx;
}
 
int main()
{
    freopen("pastrafaceri.in","r",stdin);
    freopen("pastrafaceri.out","w",stdout);
    int n,m,x,y;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++) scanf("%lld",&val[i]);
    for(int i=1;i<=m;i++)
    {
        scanf("%d%d",&x,&y);
        v[x].push_back(y);
        v[y].push_back(x);
    }
    dfs(1,0,0);
    for(int i=1;i<=n;i++)
        if(ciclu[i]==0)
        {
            cycle[++nr].push_back(i);
            ciclu[i]=nr;
        }
    memset(vaz,0,sizeof(vaz));
    dfs1(1);
    printf("%lld",sol);
    return 0;
}
