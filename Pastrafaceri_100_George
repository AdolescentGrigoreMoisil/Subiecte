/**
  * George Chichirim
  * University of Oxford
  * Correct solution: O(N + M)
  * Expected: Accepted
*/
#include <bits/stdc++.h>
 
using namespace std;
 
const int MaxN=300010;
const long long inf=1e18;
vector<int> g[MaxN];
vector<vector<int> > ciclu;
pair<long long,long long> din[MaxN];
long long sol;
int val[MaxN],tata[MaxN],niv[MaxN],ceciclu[MaxN];
char vaz[MaxN];
 
void dfs1(int nod,int t,int lev)
{
    tata[nod]=t;
    niv[nod]=lev;
    vaz[nod]=1;
    for(auto vec : g[nod])
        if(!vaz[vec]) dfs1(vec,nod,lev+1);
        else if(niv[vec]<niv[nod]-1)
        {
            ciclu.push_back(vector<int>());
            for(int x=nod;x!=vec;x=tata[x])
            {
                ciclu.back().push_back(x);
                ceciclu[x]=ciclu.size()-1;
            }
            ciclu.back().push_back(vec);
            ceciclu[vec]=ciclu.size()-1;
        }
}
 
pair<long long,long long> solve(vector<long long> &v,int poz)
{
    int n=v.size();
    for(int i=0;i<n;i++) v.push_back(v[i]);
    for(int i=1;i<v.size();i++) v[i]+=v[i-1];
    deque<pair<long long,int> > q;
    pair<long long,long long> ret={-inf,-inf};
    q.push_back({0,-1});
    for(int i=0;i<v.size();i++)
    {
        for(;q.size() && q.back().first>=v[i];q.pop_back());
        q.push_back({v[i],i});
        for(;q.front().second<i-n;q.pop_front());
        ret.first=max(ret.first,v[i]-q.front().first);
    }
    q.clear();
    q.push_back({0,-1});
    for(int i=0;i<poz+n;i++)
        if(i<poz)
        {
            for(;q.size() && q.back().first>=v[i];q.pop_back());
            q.push_back({v[i],i});
        }
        else
        {
            for(;q.front().second<i-n;q.pop_front());
            ret.second=max(ret.second,v[i]-q.front().first);
        }
    return ret;
}
 
void dfs2(int nod)
{
    int c=ceciclu[nod];
    vector<long long> v;
    vaz[c]=1;
    for(auto x : ciclu[c])
    {
        v.push_back(val[x]);
        for(auto fiu : g[x])
            if(!vaz[ceciclu[fiu]])
            {
                dfs2(fiu);
                v.back()+=max(0LL,din[ceciclu[fiu]].second);
            }
    }
    int poz;
    for(int i=0;i<ciclu[c].size();i++)
        if(ciclu[c][i]==nod) {poz=i;break;}
    din[c]=solve(v,poz);
    sol=max(sol,din[c].first);
}
 
int main()
{
    freopen("pastrafaceri.in", "r", stdin);
    freopen("pastrafaceri.out", "w", stdout);
    int n,m,x,y;
    scanf("%d%d",&n,&m);
    assert(1<=n && n<=300000);
    assert(1<=m && m<=400000);
    for(int i=1;i<=n;i++)
    {
        scanf("%d",&val[i]);
        assert(-1000000<=val[i] && val[i]<=1000000);
    }
    for(int i=1;i<=m;i++)
    {
        scanf("%d%d",&x,&y);
        assert(1<=x && x<=n);
        assert(1<=y && y<=n);
        assert(x!=y);
        g[x].push_back(y);
        g[y].push_back(x);
    }
    ciclu.push_back(vector<int>());
    dfs1(1,0,0);
    for(int i=1;i<=n;i++)
        if(ceciclu[i]==0)
        {
            ciclu.push_back(vector<int>(1,i));
            ceciclu[i]=ciclu.size()-1;
        }
    for(int i=0;i<ciclu.size();i++) vaz[i]=0;
    for(int i=1;i<ciclu.size();i++) assert(ciclu[i].size()%2);
    sol=-inf;
    dfs2(1);
    printf("%lld",sol);
    return 0;
}
