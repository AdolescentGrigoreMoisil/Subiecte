/*
 * George Marcus
 * Solutia: O(N^3sqrt(N)logN) cautare binara + cuplaj maxim de cost minim
 * AC
*/
 
#include <bits/stdc++.h>
 
using namespace std;
 
#define INF 1000000000
 
// 2 * N !
#define MAXN 2050
 
int N, ga, gd;
int A[MAXN];
int D[MAXN];
 
int cap[MAXN][MAXN];
int stableCap[MAXN][MAXN];
int cost[MAXN][MAXN];
 
int numNodes, source, sink;
vector<int> G[MAXN];
queue<int> Q;
int dist[MAXN];
bool v[MAXN];
int prv[MAXN];
 
// a2 attacks (a1, d1)
inline int calcDamage(int a1, int d1, int a2) {
  return (d1 + a2 - 1) / a2 * a1;
}
 
// min { i | ceil(d/i) > ceil(d/a) }
int calcNext(int d, int a) {
  int crt = (d + a - 1) / a;
  if (crt == 1) {
    return INF;
  }
  int nxt = (d + crt - 2) / (crt - 1);
  return nxt;
}
 
void addEdge(int a, int b, int _cap, int _cost) {
  G[a].push_back(b);
  G[b].push_back(a);
  cap[a][b] = _cap;
  stableCap[a][b] = _cap;
  cost[a][b] = _cost;
  cost[b][a] = -_cost;
}
 
// 0..N-1 minions
// N..2N-1 attacks
// 2N source
// 2N+1 sink
void buildGraph() {
  numNodes = 2 * N + 2;
  source = numNodes - 2;
  sink = numNodes - 1;
   
  for (int i = 0; i < N; i++) {
    addEdge(source, i, 1, 0);
    addEdge(N + i, sink, 1, 0);
    if (i + 1 < N) {
      addEdge(N + i, N + i + 1, INF, 0);
    }
  }
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; ) {
      int cost = calcDamage(A[i], D[i], ga + j);
      addEdge(i, N + j, 1, cost);
      j = calcNext(D[i], ga + j) - ga;
    }
  }
}
 
void deleteGraph() {
  for (int i = 0; i < numNodes; i++) {
    G[i].clear();
  }
}
 
bool bfs() {
  fill(dist, dist + numNodes, INF);
  memset(v, 0, sizeof(v));
  Q.push(source);
  v[source] = true;
  dist[source] = 0;
   
  while (!Q.empty()) {
    int p = Q.front(); Q.pop();
     
    for (vector<int> :: iterator it = G[p].begin(); it != G[p].end(); it++) {
      int x = *it;
      if (cap[p][x] > 0 && dist[p] + cost[p][x] < dist[x]) {
        dist[x] = dist[p] + cost[p][x];
        prv[x] = p;
        if (!v[x]) {
          v[x] = true;
          Q.push(x);
        }
      }
    }
     
    v[p] = false;
  }
   
  return dist[sink] < INF;
}
 
int minCost() {
  int ret = 0;
   
  while (bfs()) {
    int flmin = INF;
    for (int k = sink; k != source; k = prv[k]) {
      flmin = min(flmin, cap[prv[k]][k]);
    }
    for (int k = sink; k != source; k = prv[k]) {
      cap[prv[k]][k] -= flmin;
      cap[k][prv[k]] += flmin;
    }
    ret += dist[sink] * flmin;
  }
   
  return ret;
}
 
void prepareGraph(int n) {
  for (int i = 0; i < numNodes; i++) {
    for (vector<int> :: iterator it = G[i].begin(); it != G[i].end(); it++) {
      int x = *it;
      cap[i][x] = stableCap[i][x];
    }
  }
  for (int i = 0; i < N; i++) {
    cap[N + i][sink] = i < n;
  }
}
 
bool canKill(int n) {
  prepareGraph(n);
  int c = minCost();
  return gd + n - 1 - c > 0;
}
 
int solve() {
  buildGraph();
     
  int st = 1;
  int dr = N;
  int ans = 0;
  int m;
  while (st <= dr) {
    m = (st + dr) / 2;
    if (canKill(m)) {
      ans = m;
      st = m + 1;
    }
    else {
      dr = m - 1;
    }
  }
 
  deleteGraph();
 
  return ans;
}
 
int main() {
  assert(freopen("hsattack.in", "r", stdin));
  assert(freopen("hsattack.out","w", stdout));
  cin.sync_with_stdio(false);
   
  int T;
  assert(cin >> T);
  assert(1 <= T && T <= 20);
 
  while (T--) {
    assert(cin >> ga >> gd);
    assert(1 <= ga && ga <= 10000);
    assert(1 <= gd && gd <= 10000);
    assert(cin >> N);
    assert(1 <= N && N <=  500);
    for (int i = 0; i < N; i++) {
      assert(cin >> A[i] >> D[i]);
      assert(1 <= A[i] && A[i] <= 10000);
      assert(1 <= D[i] && D[i] <= 10000);
    }
 
    int ans = solve();
    cout << ans << endl;
  }
   
  return 0;
}
